// Generated by Dagger (https://dagger.dev).
package com.spoonart.scanmecalculator.ui;

import com.spoonart.scanmecalculator.data.ProblemRepository;
import com.spoonart.scanmecalculator.utility.TextAnalyzer;
import com.spoonart.scanmecalculator.utility.TextParserUtils;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<ProblemRepository> repositoryProvider;

  private final Provider<TextAnalyzer> textAnalyzerProvider;

  private final Provider<TextParserUtils> textParserUtilsProvider;

  public MainViewModel_Factory(Provider<ProblemRepository> repositoryProvider,
      Provider<TextAnalyzer> textAnalyzerProvider,
      Provider<TextParserUtils> textParserUtilsProvider) {
    this.repositoryProvider = repositoryProvider;
    this.textAnalyzerProvider = textAnalyzerProvider;
    this.textParserUtilsProvider = textParserUtilsProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(repositoryProvider.get(), textAnalyzerProvider.get(), textParserUtilsProvider.get());
  }

  public static MainViewModel_Factory create(Provider<ProblemRepository> repositoryProvider,
      Provider<TextAnalyzer> textAnalyzerProvider,
      Provider<TextParserUtils> textParserUtilsProvider) {
    return new MainViewModel_Factory(repositoryProvider, textAnalyzerProvider, textParserUtilsProvider);
  }

  public static MainViewModel newInstance(ProblemRepository repository, TextAnalyzer textAnalyzer,
      TextParserUtils textParserUtils) {
    return new MainViewModel(repository, textAnalyzer, textParserUtils);
  }
}
