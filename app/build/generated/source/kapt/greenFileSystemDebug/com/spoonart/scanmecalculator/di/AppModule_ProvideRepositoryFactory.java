// Generated by Dagger (https://dagger.dev).
package com.spoonart.scanmecalculator.di;

import com.spoonart.scanmecalculator.data.ProblemRepository;
import com.spoonart.scanmecalculator.database.AppDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("dagger.Reusable")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideRepositoryFactory implements Factory<ProblemRepository> {
  private final AppModule module;

  private final Provider<AppDatabase> databaseProvider;

  public AppModule_ProvideRepositoryFactory(AppModule module,
      Provider<AppDatabase> databaseProvider) {
    this.module = module;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public ProblemRepository get() {
    return provideRepository(module, databaseProvider.get());
  }

  public static AppModule_ProvideRepositoryFactory create(AppModule module,
      Provider<AppDatabase> databaseProvider) {
    return new AppModule_ProvideRepositoryFactory(module, databaseProvider);
  }

  public static ProblemRepository provideRepository(AppModule instance, AppDatabase database) {
    return Preconditions.checkNotNullFromProvides(instance.provideRepository(database));
  }
}
